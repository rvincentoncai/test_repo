name: Update Annotations QC

on:
  workflow_dispatch:

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
    - name: Get Latest VH Pipeline
      id: getLatestVHPipeline
      uses: fjogeleit/http-request-action@v1
      with:
        url: 'https://app.valohai.com/api/v0/pipelines/?project=017d9b49-9e46-865d-07dd-82c4c6e2eb29&ordering=-ctime&limit=1'
        method: 'GET'
        customHeaders: '{"Authorization": "Token ${{ secrets.VH_TOKEN }}"}'
    - name: If not pipeline name
      if: ${{ fromJson(steps.getLatestVHPipeline.outputs.response).results[0].title != 'Weekly Pipeline generate-dataset-train-evaluate-predict' &&  fromJson(steps.getLatestVHPipeline.outputs.response).results[0].status != 'complete'}}
      run: |
        echo "Error fetching Weekly Pipeline. Please check the VH Weekly PIpeline run and check the status."
        exit 1
    - name: Show Result
      run: |
        echo 'Pipeline Id : ${{ fromJson(steps.getLatestVHPipeline.outputs.response).results[0].id }}'
    - name: Get Pipeline Details
      id: getPipelineDetails
      uses: fjogeleit/http-request-action@v1
      with:
        url: 'https://app.valohai.com/api/v0/pipelines/${{ fromJson(steps.getLatestVHPipeline.outputs.response).results[0].id }}'
        method: 'GET'
        customHeaders: '{"Authorization": "Token ${{ secrets.VH_TOKEN }}"}'
    - name: Get Execution Id
      id: getExecutionId
      run: |
        pipelineDetails=$(echo '${{ steps.getPipelineDetails.outputs.response }}')
        executionId=$(echo $pipelineDetails | jq -r '.nodes[] | select(.name == "1-generate-pipeline-parameters-node").execution.id')
        echo "EXECUTION_ID=$executionId" >> "$GITHUB_OUTPUT"
    - name: Get VH Execution By Id
      id: getExecutionById
      uses: fjogeleit/http-request-action@v1
      with:
        url: 'https://app.valohai.com/api/v0/executions/${{ steps.getExecutionId.outputs.EXECUTION_ID }}'
        method: 'GET'
        customHeaders: '{"Authorization": "Token ${{ secrets.VH_TOKEN }}"}'
    - name: Log Commit Id
      id: logCommitId
      run: |
        echo 'Commit Id : ${{ fromJson(steps.getExecutionById.outputs.response).commit.identifier }}'
        echo "COMMIT_ID=${{ fromJson(steps.getExecutionById.outputs.response).commit.identifier }}" >> "$GITHUB_OUTPUT"
    - name: Create Tag
      uses: actions/checkout@v4
      with:
        repository: 'oncai/nsclc-classifier'
        ref: 'develop'
        token: '${{ secrets.GI_PAT_SECRET }}'
      
